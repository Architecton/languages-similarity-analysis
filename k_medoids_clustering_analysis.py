import numpy as np
from lib_naloga2 import clustering
from lib_naloga2 import group_analyzer

########################
# Author: Jernej Vivod #
########################

# Second Home Assignment for the Introduction to Data Analysis Class
# See instructions in folder.
#
# Perform k-medoid clustering on vectors obtained from text documents.

# Load dictionary stored in results_dict.npy that was generated by the text_analyzer script.
results_dict = np.load('triplets_dicts.npy').item()

# Create new instance of KMclustering class implementing methods used for permorming the
# k-medoids clustering algorithm. Initialize with results_dict data.
km = clustering.KMclustering(results_dict)

# Define list that will store the groups found in every run of the k-medoids algorithm.
# Results of each run are represented as a list of list where each sublist represents a group.
groups_by_iteration = []

# Set number of groups and number of iterations for the k-medoids algorithm.
NUM_GROUPS = 5
NUM_ITERATIONS = 10

# Run with 5 medoids.
for k in range(NUM_ITERATIONS):
	print('Computing iteration {0}...'.format(k+1))
	# Run k-medoids algorithm.
	km.run(NUM_GROUPS)

	# Create groups from resulting associations.
	groups = dict((key, [key]) for key in km.associations.values()) 	# Make sure to add medoid to group.
	for assoc in km.associations.keys():
		groups[km.associations[assoc]].append(assoc) 					# Add node associated with medoid to group.

	groups_by_iteration.append([group for group in groups.values()]) 	# Add groups to list of groups by run.


# Display results.
iteration_index = 1
for iteration_groups in groups_by_iteration:
	print("\n**************************** Groups in iteration {0} ****************************".format(iteration_index))
	group_analyzer.display_groups(iteration_groups)
	iteration_index += 1